// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ItemAdded extends ethereum.Event {
  get params(): ItemAdded__Params {
    return new ItemAdded__Params(this);
  }
}

export class ItemAdded__Params {
  _event: ItemAdded;

  constructor(event: ItemAdded) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get threshold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get supplier(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class LowStockDetected extends ethereum.Event {
  get params(): LowStockDetected__Params {
    return new LowStockDetected__Params(this);
  }
}

export class LowStockDetected__Params {
  _event: LowStockDetected;

  constructor(event: LowStockDetected) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RestockInitiated extends ethereum.Event {
  get params(): RestockInitiated__Params {
    return new RestockInitiated__Params(this);
  }
}

export class RestockInitiated__Params {
  _event: RestockInitiated;

  constructor(event: RestockInitiated) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get restockAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get supplier(): string {
    return this._event.parameters[2].value.toString();
  }

  get totalCost(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StockDecreased extends ethereum.Event {
  get params(): StockDecreased__Params {
    return new StockDecreased__Params(this);
  }
}

export class StockDecreased__Params {
  _event: StockDecreased;

  constructor(event: StockDecreased) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newQuantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StockIncreased extends ethereum.Event {
  get params(): StockIncreased__Params {
    return new StockIncreased__Params(this);
  }
}

export class StockIncreased__Params {
  _event: StockIncreased;

  constructor(event: StockIncreased) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newQuantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__getItemResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: string;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): string {
    return this.value4;
  }
}

export class Contract__inventoryResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: string;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getQuantity(): BigInt {
    return this.value1;
  }

  getThreshold(): BigInt {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getSupplier(): string {
    return this.value4;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getItem(itemId: BigInt): Contract__getItemResult {
    let result = super.call(
      "getItem",
      "getItem(uint256):(string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(itemId)],
    );

    return new Contract__getItemResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString(),
    );
  }

  try_getItem(itemId: BigInt): ethereum.CallResult<Contract__getItemResult> {
    let result = super.tryCall(
      "getItem",
      "getItem(uint256):(string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(itemId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getItemResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString(),
      ),
    );
  }

  inventory(param0: BigInt): Contract__inventoryResult {
    let result = super.call(
      "inventory",
      "inventory(uint256):(string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__inventoryResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString(),
    );
  }

  try_inventory(
    param0: BigInt,
  ): ethereum.CallResult<Contract__inventoryResult> {
    let result = super.tryCall(
      "inventory",
      "inventory(uint256):(string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__inventoryResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString(),
      ),
    );
  }
}

export class AddItemCall extends ethereum.Call {
  get inputs(): AddItemCall__Inputs {
    return new AddItemCall__Inputs(this);
  }

  get outputs(): AddItemCall__Outputs {
    return new AddItemCall__Outputs(this);
  }
}

export class AddItemCall__Inputs {
  _call: AddItemCall;

  constructor(call: AddItemCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get threshold(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get supplier(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class AddItemCall__Outputs {
  _call: AddItemCall;

  constructor(call: AddItemCall) {
    this._call = call;
  }
}

export class DecreaseStockCall extends ethereum.Call {
  get inputs(): DecreaseStockCall__Inputs {
    return new DecreaseStockCall__Inputs(this);
  }

  get outputs(): DecreaseStockCall__Outputs {
    return new DecreaseStockCall__Outputs(this);
  }
}

export class DecreaseStockCall__Inputs {
  _call: DecreaseStockCall;

  constructor(call: DecreaseStockCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseStockCall__Outputs {
  _call: DecreaseStockCall;

  constructor(call: DecreaseStockCall) {
    this._call = call;
  }
}

export class IncreaseStockCall extends ethereum.Call {
  get inputs(): IncreaseStockCall__Inputs {
    return new IncreaseStockCall__Inputs(this);
  }

  get outputs(): IncreaseStockCall__Outputs {
    return new IncreaseStockCall__Outputs(this);
  }
}

export class IncreaseStockCall__Inputs {
  _call: IncreaseStockCall;

  constructor(call: IncreaseStockCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseStockCall__Outputs {
  _call: IncreaseStockCall;

  constructor(call: IncreaseStockCall) {
    this._call = call;
  }
}

export class RestockItemCall extends ethereum.Call {
  get inputs(): RestockItemCall__Inputs {
    return new RestockItemCall__Inputs(this);
  }

  get outputs(): RestockItemCall__Outputs {
    return new RestockItemCall__Outputs(this);
  }
}

export class RestockItemCall__Inputs {
  _call: RestockItemCall;

  constructor(call: RestockItemCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get restockAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RestockItemCall__Outputs {
  _call: RestockItemCall;

  constructor(call: RestockItemCall) {
    this._call = call;
  }
}
